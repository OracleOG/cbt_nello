generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------
// Enums
// -----------------------------
enum RoleName {
  ADMIN
  STUDENT
  TEACHER
}

// ----------------------------------
// Authentication & Users 
// ----------------------------------
model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  email      String   @unique
  password   String
  firstName  String
  middleName String?
  lastName   String
  createdAt  DateTime @default(now())

  roleId Int
  role   Role @relation(fields: [roleId], references: [id])

  // back-relations
  questionsCreated Question[]  @relation("QuestionAuthor")
  testTakes        TestTaker[] @relation("TestTakers") // explicit join entries
  testsCreated     Test[]      @relation("TestCreators") // the tests this user created
  Answer           Answer[]
  testsUpdated Test[] @relation("TestUpdatedBy")
  @@index([username])

}

// ----------------------------------
// Academic Periods
// ----------------------------------
model Session {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String

  semesters Semester[]
  tests     Test[]     @relation("SessionTests")
}

model Semester {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
  tests     Test[]  @relation("SemesterTests")
}

// ----------------------------------
// Tests / courses
// ----------------------------------

enum TestStatus {
  ENABLED
  DISABLED
}

model Test {
  id           Int        @id @default(autoincrement())
  title        String
  durationMins Int
  status       TestStatus @default(DISABLED)

  session   Session @relation("SessionTests", fields: [sessionId], references: [id])
  sessionId Int

  semester   Semester @relation("SemesterTests", fields: [semesterId], references: [id])
  semesterId Int

  questions   Question[] // one-to-many
  takers      TestTaker[] @relation("TestTakers") // join entries
  createdBy   User?       @relation("TestCreators", fields: [createdById], references: [id])
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   User? @relation("TestUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?
  description String?

  }

// ----------------------------------
// Explicit Join: User <-> Test 
// ----------------------------------
model TestTaker {
  id     Int    @id @default(autoincrement())
  user   User   @relation("TestTakers", fields: [userId], references: [id])
  userId String
  test   Test   @relation("TestTakers", fields: [testId], references: [id])
  testId Int

  registeredAt  DateTime  @default(now())
  score         Float?
  startedAt     DateTime?
  completedAt   DateTime?
  timeRemaining Int? // ðŸ‘ˆ Add this

  answers Json? // JSON-encoded answers
  Answer  Answer[]

  @@unique([userId, testId])
  @@map("_TestTakers")
}

// ----------------------------------
// Questions & Options & Answers
// ----------------------------------
model Question {
  id         Int    @id @default(autoincrement())
  text       String
  difficulty Int?

  test   Test @relation(fields: [testId], references: [id])
  testId Int

  createdBy   User   @relation("QuestionAuthor", fields: [createdById], references: [id])
  createdById String

  options Option[]
  Answer  Answer[]
}

model Option {
  id        Int     @id @default(autoincrement())
  label     String
  text      String
  isCorrect Boolean

  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  Answer     Answer[]

  @@unique([questionId, label])
}

model Answer {
  id          Int       @id @default(autoincrement())
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  Int
  option      Option    @relation(fields: [optionId], references: [id])
  optionId    Int
  testTaker   TestTaker @relation(fields: [testTakerId], references: [id])
  testTakerId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  isCorrect   Boolean
  createdAt   DateTime  @default(now())

  @@unique([questionId, testTakerId]) // One answer per question per attempt
  @@index([testTakerId])
  @@index([userId])
}
